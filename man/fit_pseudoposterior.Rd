% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maximum_pseudolikelihood_functions.R
\name{fit_pseudoposterior}
\alias{fit_pseudoposterior}
\title{Optimizing the Ising model's pseudoposterior distribution}
\usage{
fit_pseudoposterior(x, prior_var = 1, iteration_max = 100)
}
\arguments{
\item{x}{An \code{n} by \code{p} matrix containing binary coded
responses (i.e., coded \code{0,1}) for \code{n} independent observations
on \code{p} variables in the network or graph.}

\item{prior_var}{The variance of the prior distribution stipulated on the
Ising model parameters. Currently a normal distribution is used for all
model parameters, with a mean equal to zero and a variance equal to
\code{prior_var}. Defaults to \code{1}.}

\item{iteration_max}{The maximum number of Newton-Raphson iterations used in
optimization. Defaults to \code{1e2}. A warning is issued if procedure has
not converged in \code{iteration_max} iterations.}
}
\value{
A list containing \code{mu} and \code{sigma}, a numeric vector of
  length \code{p} containing the threshold estimates and a \code{p} by
  \code{p} numeric matrix of pairwise association estimates. Also included
  are \code{s.d.mu} and \code{s.d.sigma}, which contain the corresponding
  posterior standard deviations.
}
\description{
The function \code{fit_pseudoposterior} can be used to optimize the Ising
model's pseudoposterior distribution. It provides the posterior modes and
standard deviations of both the thresholds and pairwise associations. The
function produces maximum pseudolikelihood estimates and standard errors
whenever \code{prior_var} is set to \code{Inf}.
}
\details{
Optimization is performed with respect to all \code{p} full-conditional
distributions at once. Standard deviations (standard errors) are based on
assumption of asymptotic normality. The function \code{fit_pseudoposterior}
calls \code{\link{optimize_pseudoposterior}} and
\code{\link{compute_standard_deviation}}.
}
\examples{
library("IsingSampler")
### Simulate dataset ###
# Input:
p <- 6 # Number of nodes
n <- 1000 # Number of samples
# Ising parameters:
Graph <- matrix(data = 0, nrow = p, ncol = p)
Graph[lower.tri(Graph)] <- runif(n = p * (p - 1) / 2, min = -.5, max = 1)
Graph <- Graph + t(Graph)
Thresholds <- -rowSums(Graph) / 2
# Simulate:
Data <- IsingSampler(n = n, graph = Graph, thresholds = Thresholds)
### Fit using fit_pseudoposterior ###
Fit_ml <- fit_pseudoposterior(x = Data, prior_var = Inf)
Fit_bayes <- fit_pseudoposterior(x = Data, prior_var = 1)
# Plot results:
library("qgraph")
layout(t(1:3))
qgraph(Fit_ml$sigma,fade = FALSE)
title("ML estimated network")
qgraph(Fit_bayes$sigma,fade = FALSE)
title("Bayes estimated network")
qgraph(Graph,fade = FALSE)
title("Original network")

}
