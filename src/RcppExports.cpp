// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_pgdraw
NumericVector rcpp_pgdraw(int b, NumericVector c);
RcppExport SEXP _binnetskeleton_rcpp_pgdraw(SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pgdraw(b, c));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_hierarchical_samples
List gibbs_hierarchical_samples(int number_burnin_iterations, int number_iterations, IntegerMatrix x, NumericMatrix sigma, IntegerMatrix gamma, NumericMatrix spike_var, NumericMatrix slab_var, IntegerMatrix include, NumericVector sufC, int alpha, int beta, int number_edges, double theta, double prior_var_intercepts, double df, CharacterVector components, bool display_progress);
RcppExport SEXP _binnetskeleton_gibbs_hierarchical_samples(SEXP number_burnin_iterationsSEXP, SEXP number_iterationsSEXP, SEXP xSEXP, SEXP sigmaSEXP, SEXP gammaSEXP, SEXP spike_varSEXP, SEXP slab_varSEXP, SEXP includeSEXP, SEXP sufCSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP number_edgesSEXP, SEXP thetaSEXP, SEXP prior_var_interceptsSEXP, SEXP dfSEXP, SEXP componentsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_burnin_iterations(number_burnin_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type number_iterations(number_iterationsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spike_var(spike_varSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type slab_var(slab_varSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type include(includeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sufC(sufCSEXP);
    Rcpp::traits::input_parameter< int >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type number_edges(number_edgesSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_intercepts(prior_var_interceptsSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_hierarchical_samples(number_burnin_iterations, number_iterations, x, sigma, gamma, spike_var, slab_var, include, sufC, alpha, beta, number_edges, theta, prior_var_intercepts, df, components, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_hierarchical_eap
List gibbs_hierarchical_eap(int number_burnin_iterations, int number_iterations, IntegerMatrix x, NumericMatrix sigma, IntegerMatrix gamma, NumericMatrix spike_var, NumericMatrix slab_var, IntegerMatrix include, NumericVector sufC, int alpha, int beta, int number_edges, double theta, double prior_var_intercepts, double df, CharacterVector components, bool display_progress);
RcppExport SEXP _binnetskeleton_gibbs_hierarchical_eap(SEXP number_burnin_iterationsSEXP, SEXP number_iterationsSEXP, SEXP xSEXP, SEXP sigmaSEXP, SEXP gammaSEXP, SEXP spike_varSEXP, SEXP slab_varSEXP, SEXP includeSEXP, SEXP sufCSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP number_edgesSEXP, SEXP thetaSEXP, SEXP prior_var_interceptsSEXP, SEXP dfSEXP, SEXP componentsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_burnin_iterations(number_burnin_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type number_iterations(number_iterationsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spike_var(spike_varSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type slab_var(slab_varSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type include(includeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sufC(sufCSEXP);
    Rcpp::traits::input_parameter< int >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type number_edges(number_edgesSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_intercepts(prior_var_interceptsSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_hierarchical_eap(number_burnin_iterations, number_iterations, x, sigma, gamma, spike_var, slab_var, include, sufC, alpha, beta, number_edges, theta, prior_var_intercepts, df, components, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_uniform_samples
List gibbs_uniform_samples(int number_burnin_iterations, int number_iterations, IntegerMatrix x, NumericMatrix sigma, IntegerMatrix gamma, NumericMatrix spike_var, NumericMatrix slab_var, IntegerMatrix include, NumericVector sufC, int alpha, int beta, int number_edges, double theta, double prior_var_intercepts, double df, CharacterVector components, bool display_progress);
RcppExport SEXP _binnetskeleton_gibbs_uniform_samples(SEXP number_burnin_iterationsSEXP, SEXP number_iterationsSEXP, SEXP xSEXP, SEXP sigmaSEXP, SEXP gammaSEXP, SEXP spike_varSEXP, SEXP slab_varSEXP, SEXP includeSEXP, SEXP sufCSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP number_edgesSEXP, SEXP thetaSEXP, SEXP prior_var_interceptsSEXP, SEXP dfSEXP, SEXP componentsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_burnin_iterations(number_burnin_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type number_iterations(number_iterationsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spike_var(spike_varSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type slab_var(slab_varSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type include(includeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sufC(sufCSEXP);
    Rcpp::traits::input_parameter< int >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type number_edges(number_edgesSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_intercepts(prior_var_interceptsSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_uniform_samples(number_burnin_iterations, number_iterations, x, sigma, gamma, spike_var, slab_var, include, sufC, alpha, beta, number_edges, theta, prior_var_intercepts, df, components, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_uniform_eap
List gibbs_uniform_eap(int number_burnin_iterations, int number_iterations, IntegerMatrix x, NumericMatrix sigma, IntegerMatrix gamma, NumericMatrix spike_var, NumericMatrix slab_var, IntegerMatrix include, NumericVector sufC, int alpha, int beta, int number_edges, double theta, double prior_var_intercepts, double df, CharacterVector components, bool display_progress);
RcppExport SEXP _binnetskeleton_gibbs_uniform_eap(SEXP number_burnin_iterationsSEXP, SEXP number_iterationsSEXP, SEXP xSEXP, SEXP sigmaSEXP, SEXP gammaSEXP, SEXP spike_varSEXP, SEXP slab_varSEXP, SEXP includeSEXP, SEXP sufCSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP number_edgesSEXP, SEXP thetaSEXP, SEXP prior_var_interceptsSEXP, SEXP dfSEXP, SEXP componentsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_burnin_iterations(number_burnin_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type number_iterations(number_iterationsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type spike_var(spike_varSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type slab_var(slab_varSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type include(includeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sufC(sufCSEXP);
    Rcpp::traits::input_parameter< int >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type number_edges(number_edgesSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type prior_var_intercepts(prior_var_interceptsSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_uniform_eap(number_burnin_iterations, number_iterations, x, sigma, gamma, spike_var, slab_var, include, sufC, alpha, beta, number_edges, theta, prior_var_intercepts, df, components, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_binnetskeleton_rcpp_pgdraw", (DL_FUNC) &_binnetskeleton_rcpp_pgdraw, 2},
    {"_binnetskeleton_gibbs_hierarchical_samples", (DL_FUNC) &_binnetskeleton_gibbs_hierarchical_samples, 17},
    {"_binnetskeleton_gibbs_hierarchical_eap", (DL_FUNC) &_binnetskeleton_gibbs_hierarchical_eap, 17},
    {"_binnetskeleton_gibbs_uniform_samples", (DL_FUNC) &_binnetskeleton_gibbs_uniform_samples, 17},
    {"_binnetskeleton_gibbs_uniform_eap", (DL_FUNC) &_binnetskeleton_gibbs_uniform_eap, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_binnetskeleton(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
